import streamlit as st
import os
import time
from PIL import Image
from speech import create_wav


# Set up Streamlit page configuration
st.set_page_config(
    page_title="Edge AI",
    page_icon="ðŸ“…",
)

# Function to emulate streamed responses
def response_generator(txt):
    for word in txt.split():
        yield word + " "
        time.sleep(0.05)

# Clean up the 'vocal' folder if it exists
dossier = "vocal"
if os.path.exists(dossier) and os.path.isdir(dossier):
    for fichier in os.listdir(dossier):
        chemin_complet = os.path.join(dossier, fichier)
        if os.path.isfile(chemin_complet):
            os.remove(chemin_complet)

# Layout setup
col1, col2 = st.columns([1, 4])
image = Image.open('logoapp.png')

with col1:
    st.image(image, use_column_width=True)

with col2:
    st.title("Event AI")

# Initialize session state
if "messages" not in st.session_state:
    st.session_state.messages = []

if "audio" not in st.session_state:
    st.session_state.audio = []

if "reponses" not in st.session_state:
    st.session_state.reponses = []

# Display chat history on app rerun
for message, audio, reponse in zip(st.session_state.messages, st.session_state.audio, st.session_state.reponses):
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
    with st.chat_message(reponse["role"]):
        st.markdown(reponse["content"])
    st.audio(audio["content"], format="audio/wav")

# Accept user input
if prompt := st.chat_input("Une question sur un Ã©vÃ¨nement ?"):
    # Add user message to session state
    st.session_state.messages.append({"role": "user", "content": prompt})

    # Display user message
    with st.chat_message("user"):
        st.markdown(prompt)

    # Generate assistant response
    with st.chat_message("assistant"):
        txt = "a"#model_gguf(prompt)
        response = "".join(response_generator(txt))
        st.markdown(response)

    # Generate speech from response
    txt_for_speech = txt[:600] if len(txt) >= 600 else txt
    file_name = os.path.join("vocal", create_wav(txt_for_speech))
    st.audio(file_name, format="audio/wav")
    st.markdown("This answer was generated by Event AI. For more information, consult:")
    st.markdown("[Our diary](https://sortir.issy.com/agenda/?oaq%5Bpassed%5D=1&oaq%5Border%5D=latest)", unsafe_allow_html=True)

    # Add assistant response to session state
    st.session_state.reponses.append({"role": "assistant", "content": txt})
    st.session_state.audio.append({"content": file_name})